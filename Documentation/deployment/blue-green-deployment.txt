
###################################
Blue-Green Deployment
###################################

How it works: Two environments are maintainedâ€”Blue (current production) and Green (new version). 
The traffic is switched to the Green environment after deployment and testing.
Benefits:
Minimal downtime.
Easy rollback to the Blue environment if issues arise.
Challenges: Requires maintaining two environments, which can increase costs.

###################################
Kubernetes YAML
###################################
This example deploys two environments (blue and green) with a Service that routes traffic to 
the active environment.

Deployment for Blue and Green

# Deployment for Blue environment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app-blue
spec:
  replicas: 3
  selector:
    matchLabels:
      app: my-app
      version: blue
  template:
    metadata:
      labels:
        app: my-app
        version: blue
    spec:
      containers:
      - name: my-app
        image: my-app:v1.0
        ports:
        - containerPort: 80

---

# Deployment for Green environment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app-green
spec:
  replicas: 3
  selector:
    matchLabels:
      app: my-app
      version: green
  template:
    metadata:
      labels:
        app: my-app
        version: green
    spec:
      containers:
      - name: my-app
        image: my-app:v1.0
        ports:
        - containerPort: 80



apiVersion: v1
kind: Service
metadata:
  name: my-app-service
spec:
  selector:
    app: my-app
    version: blue # Change this to green to switch environments
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80


2. Jenkinsfile for Blue-Green Deployment
This pipeline will deploy the application to the Green environment, test it, and switch traffic.

pipeline {
    agent any
    stages {
        stage('Build') {
            steps {
                echo 'Building the application...'
                sh 'docker build -t my-app:v1.0 .'
            }
        }
        stage('Deploy to Green') {
            steps {
                echo 'Deploying to Green environment...'
                sh '''
                kubectl apply -f green-deployment.yaml
                '''
            }
        }
        stage('Test Green') {
            steps {
                echo 'Running tests on Green environment...'
                sh '''
                # Replace with actual tests, e.g., health checks
                curl http://green.my-app-service
                '''
            }
        }
        stage('Switch to Green') {
            steps {
                echo 'Switching traffic to Green environment...'
                sh '''
                kubectl patch service my-app-service -p '{"spec":{"selector":{"version":"green"}}}'
                '''
            }
        }
        stage('Cleanup Blue (Optional)') {
            steps {
                echo 'Cleaning up Blue environment...'
                sh '''
                kubectl delete deployment my-app-blue
                '''
            }
        }
    }
}



Key Notes:
Testing: It's crucial to have a robust testing mechanism before switching traffic.
Rollback: If anything goes wrong with Green, revert the Service selector back to blue without 
downtime.
Automation: Ensure your CI/CD pipeline has sufficient monitoring and logging to validate the 
success of the deployment.



