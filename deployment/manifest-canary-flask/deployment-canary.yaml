apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-app-deployment
  labels:
    app: flask-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: flask-app
  template:
    metadata:
      labels:
        app: flask-app
    spec:
      containers:
        - name: flask-app-container
          image: dockerelvis/python-memcached:${VERSION}
          ports:
            - containerPort: 8095
          envFrom:
            - configMapRef:
                name: flask-app-config  # Reference ConfigMap for environment variables
            - configMapRef:
                name: flask-app-resources  # Reference ConfigMap for resource settings
          resources:
            requests:
              memory: "${MEMORY_REQUEST}"
              cpu: "${CPU_REQUEST}"
            limits:
              memory: "${MEMORY_LIMIT}"
              cpu: "${CPU_LIMIT}"
          readinessProbe:
            httpGet:
              path: /health
              port: 8095
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /health
              port: 8095
            initialDelaySeconds: 15
            periodSeconds: 20
      terminationGracePeriodSeconds: 30
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
---
apiVersion: v1
kind: Service
metadata:
  name: flask-app-service
spec:
  selector:
    app: flask-app
  ports:
    - protocol: TCP
      port: 8095
      targetPort: 8095
  type: LoadBalancer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: flask-app-config
  labels:
    app: flask-app
data:
  MEMCACHED_HOST: "memcached-service"
  MEMCACHED_PORT: "11211"
  OPERATING_SYSTEM: "kubernetes"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: flask-app-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: nfs-client
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: flask-app-ingress
  labels:
    app: flask-app
  annotations:
    nginx.ingress.kubernetes.io/canary: "true"  # Enables Canary deployment
    nginx.ingress.kubernetes.io/canary-weight: "50"  # Routes 50% of traffic to the canary service
spec:
  rules:
    - host: flask-app.example.com  # Replace with your actual domain
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: flask-app-service  # Name of your service
                port:
                  number: 8095  # Port on which your service is exposed



# export VERSION="1.0.0"
# envsubst < deployment.yaml | kubectl apply -f -
