name: Deploy to Kubernetes

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Select the branch to deploy'
        required: true
        default: 'main'
      your_tag:
        description: 'The pytest tag to run tests with'
        required: false
        default: 'home'

jobs:
      
  Install-dependencies:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:20.04
    steps:
      - name: Install-dependencies
        run: |
          apt-get update
          apt-get install -y python3-pip curl docker.io
          pip install pytest requests pylint

      # Create the artefacts folder
      - name: Create artefacts folder
        run: mkdir -p artefacts

      # Add sample files to the artefacts folder (for demonstration)
      - name: Add files to artefacts folder
        run: |
          echo "Dependencies installed" > artefacts/dependencies.txt
          echo "pytest version: $(pytest --version)" >> artefacts/dependencies.txt
          echo "requests version: $(python -c 'import requests; print(requests.__version__)')" >> artefacts/dependencies.txt
          echo "pylint version: $(pylint --version)" >> artefacts/dependencies.txt

      - name: Upload-Artefacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artefacts
          path: artefacts
          retention-days: 5

  Discover-tests:
    needs: [Install-dependencies]
    runs-on: ubuntu-latest
    container:
      image: ubuntu:20.04
    steps:
      - name: Download-Artefacts
        uses: actions/download-artifact@v3
        with:
          name: build-artefacts
      - name: Discover tests
        run: pytest --collect-only
      - name: List installed packages
        run: pip freeze


#  Install-Docker-Compose:
#    needs: [Discover-tests]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Download-Artefacts
#        uses: actions/download-artifact@v3
#        with:
#          name: artefacts-file
#      - name: Install-Docker-Compose
#        run: |
#          curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
#          chmod +x /usr/local/bin/docker-compose
#      - name: Upload-Artefacts
#        uses: actions/upload-artifact@v3
#        with:
#          name: artefacts-file
#          path: output/artefacts.txt
#          retention-days: 5
#          overwrite: true
#
#  Checkout-repository:
#    needs: [Install-Docker-Compose]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Download-Artefacts
#        uses: actions/download-artifact@v3
#        with:
#          name: artefacts-file
#      - name: Checkout-repository
#        uses: actions/checkout@v4
#        with:
#          ref: ${{ inputs.branch }}
#      - name: Upload-Artefacts
#        uses: actions/upload-artifact@v3
#        with:
#          name: artefacts-file
#          path: output/artefacts.txt
#          retention-days: 5
#          overwrite: true
#
#  Testing:
#    needs: [Checkout-repository]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Download-Artefacts
#        uses: actions/download-artifact@v3
#        with:
#          name: artefacts-file
#      - name: Run-Docker-Compose-for-Testing
#        run: |
#          if [ -n "${{ inputs.your_tag }}" ]; then
#            TEST_TAG="${{ inputs.your_tag }}" docker-compose -f docker-compose.test.yml up --build test-app
#          else
#            docker-compose -f docker-compose.test.yml up --build test-app
#          fi
#      - name: Upload-Artefacts
#        uses: actions/upload-artifact@v3
#        with:
#          name: artefacts-file
#          path: output/artefacts.txt
#          retention-days: 5
#          overwrite: true
#
#  vulnerability-scan:
#    needs: [Testing]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Download-Artefacts
#        uses: actions/download-artifact@v3
#        with:
#          name: artefacts-file
#      - name: Install-Trivy
#        run: |
#          curl -fsSL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
#      - name: Scan Dockerfile for Vulnerabilities
#        run: |
#          trivy config --severity HIGH,CRITICAL Dockerfile
#
#  deploy:
#    needs: vulnerability-scan
#    runs-on: ubuntu-latest
#    steps:
#      - name: Install dependencies (kubectl, Docker)
#        run: |
#          apt-get update
#          apt-get install -y python3-pip docker.io curl
#          pip install pylint
#          curl -sSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
#          echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" >> /etc/apt/sources.list.d/kubernetes.list
#          apt-get update && apt-get install -y kubectl
#
#      - name: Checkout repository
#        uses: actions/checkout@v4
#        with:
#          ref: ${{ inputs.branch }}
#
#      - name: Run Pylint
#        run: |
#          pylint **/*.py
#
#      - name: Build Docker image
#        run: |
#          docker build -t ${{ secrets.DOCKER_USERNAME }}/my-app:${{ inputs.branch }} .
#
#      - name: Push Docker image to Docker Hub
#        run: |
#          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
#          docker push ${{ secrets.DOCKER_USERNAME }}/my-app:${{ inputs.branch }}
#
#      - name: Deploy to Test Environment
#        run: |
#          docker-compose -f docker-compose.yml up -d
#
#      - name: Manual Approval for Staging Environment
#        uses: hmarr/auto-approve-action@v4
#        with:
#          require: true
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Deploy to Staging Environment
#        run: |
#          docker-compose -f docker-compose.yml up -d
#
#      - name: Manual Approval for Production Environment
#        uses: hmarr/auto-approve-action@v4
#        with:
#          require: true
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Deploy to Production (Kubernetes)
#        if: ${{ inputs.branch == 'release' }}
#        run: |
#          kubectl apply -f k8s/production-deployment.yaml
#
#      - name: Verify Deployment
#        run: |
#          kubectl rollout status deployment/memcached-deployment
