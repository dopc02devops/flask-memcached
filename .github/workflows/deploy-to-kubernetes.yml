name: Deploy to Kubernetes

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Select the branch to deploy'
        required: true
        default: 'main'
      pytest_tag:
        description: 'The pytest tag to run tests with'
        required: false
        default: 'home'
      release_tag:
        description: 'Specify the release tag for the Docker image'
        required: false
        default: 'latest'

jobs:
#  Install-Dependencies:
#    runs-on: ubuntu-latest
#    container:
#      image: ubuntu:20.04
#    steps:
#      - name: Cache Python dependencies
#        uses: actions/cache@v3
#        with:
#          path: |
#            .venv/
#            .tox/
#            .nox/
#            .docker/cache/
#            .pip/
#            ~/.cache/pip/
#          key: ${{ runner.os }}-python-${{ hashFiles('**/requirements.txt') }}
#          restore-keys: |
#            ${{ runner.os }}-python-
#
#      - name: Install dependencies
#        run: |
#          set -e
#          apt-get update
#          apt-get install -y python3-pip curl docker.io
#          pip install pytest requests pylint
#
#  Test:
#    needs: [Install-Dependencies]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Install Docker Compose
#        run: |
#          set -e
#          curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
#          chmod +x /usr/local/bin/docker-compose
#
#      - name: Checkout repository
#        uses: actions/checkout@v4
#        with:
#          ref: ${{ inputs.branch }}
#
#      - name: Run Docker Compose and Prepare Report
#        run: |
#          set -e
#          # Create docker volume
#          docker volume create app_volume
#          pip install pytest-html
#
#          if [ -n "${{ inputs.pytest_tag }}" ]; then
#            TEST_TAG="${{ inputs.pytest_tag }}" docker-compose -f docker-compose.test.yml up --build test-app
#          else
#            docker-compose -f docker-compose.test.yml up --build test-app
#          fi
#
#          # Copy files from flask-test to localhost
#          docker cp flask-tests-container:/app/report.xml ./report.xml
#          docker cp flask-tests-container:/app/report.html ./report.html
#          docker cp flask-tests-container:/app/Dockerfile.app ./Dockerfile.app
#          docker cp flask-tests-container:/app/Dockerfile.test ./Dockerfile.test
#
#      - name: Upload XML Report Artifact
#        uses: actions/upload-artifact@v3
#        with:
#          name: xml-report
#          path: ./report.xml
#          retention-days: 1
#
#      - name: Upload HTML Report Artifact
#        uses: actions/upload-artifact@v3
#        with:
#          name: html-report
#          path: ./report.html
#          retention-days: 1
#
#      - name: Install Trivy
#        run: |
#          set -e
#          sudo apt-get update
#          sudo apt-get install -y wget
#          sudo wget https://github.com/aquasecurity/trivy/releases/download/v0.29.1/trivy_0.29.1_Linux-64bit.deb
#          sudo dpkg -i trivy_0.29.1_Linux-64bit.deb
#      - name: Trivy Scan Dockerfile.app
#        run: |
#          set -e
#          sudo trivy config --severity HIGH,CRITICAL ./Dockerfile.app
#      - name: Trivy Scan Dockerfile.test
#        run: |
#          set -e
#          sudo trivy config --severity HIGH,CRITICAL ./Dockerfile.test
#
#  Build-docker-image:
#    needs: [Test]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4
#        with:
#          ref: ${{ inputs.branch }}
#      - name: Build Docker image
#        run: |
#          set -e
#          pwd
#          ls -la /home/runner/work/flask-memcached/flask-memcached/src
#          cd src
#          docker build -t ${{ secrets.DOCKER_USERNAME }}/python-memcached:${{ inputs.release_tag }} -f ./Dockerfile.app .
#      - name: Push Docker image to Docker Hub
#        run: |
#          set -e
#          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
#          docker push ${{ secrets.DOCKER_USERNAME }}/python-memcached:${{ inputs.release_tag }}
  Deploy-to-test-env:
    #needs: [Build-docker-image]
    runs-on: ubuntu-latest
    env:
      REMOTE_USER: "kube_user"   # SSH user
    steps:
      # Set up Python and install Ansible
      - name: Set up Ansible
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      # Create SSH private key file
      - name: Create SSH private key file
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_gcp_key
          chmod 600 ~/.ssh/id_gcp_key  # Ensure proper permissions on the SSH key

      # Create Ansible Hosts File
      - name: Create Ansible Hosts File and Add SSH Key
        run: |
          # Start the ssh-agent
          eval $(ssh-agent -s)
          
          # Add the SSH key to the agent with the passphrase
          echo "${{ secrets.SSH_PASSPHRASE }}" | ssh-add ~/.ssh/id_gcp_key
          
          # Create the Ansible hosts file
          echo "[all]
          ${{ vars.UBUNTU_GCP }} ansible_user=${{ vars.REMOTE_USER }} ansible_ssh_private_key_file=${HOME}/.ssh/id_gcp_key ansible_ssh_common_args='-o StrictHostKeyChecking=no'" > hosts
          
          # Add a message regarding the SSH connection
          echo "SSH connection details for ${{ vars.REMOTE_USER }} using private key id_gcp_key" >> hosts
          
          # Optionally stop the SSH agent
          ssh-agent -k

      # Create Ansible Configuration
      - name: Create Ansible Configuration
        run: |
          echo "[defaults]
          inventory = hosts
          timeout = 30
          host_key_checking = False
          
          [ssh_connection]
          pipelining = True" > ansible.cfg

      # Ping Ansible Host to Verify Connectivity
      - name: Ping Ansible Host
        run: |
          ansible -m ping ${{vars.UBUNTU_GCP}}

      # Run Ansible Playbook
      - name: Run Ansible Playbook
        env:
          ANSIBLE_HOST_KEY_CHECKING: "False"
        run: |
          ansible-playbook deploy.yml

