name: Deploy to Kubernetes

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Select the branch to deploy'
        required: true
        default: 'main'
      your_tag:
        description: 'The pytest tag to run tests with'
        required: false
        default: 'home'

jobs:

  Install-Dependencies:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:20.04
    steps:
      - name: Install dependencies
        run: |
          set -e
          apt-get update
          apt-get install -y python3-pip curl docker.io
          pip install pytest requests pylint

  Test:
    needs: [Install-Dependencies]
    runs-on: ubuntu-latest
    steps:
      - name: Install Docker Compose
        run: |
          set -e
          curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          pip install pytest-html

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      - name: Run Docker Compose and Prepare Report
        run: |
          set -e
          # Create docker volume
          docker volume create app_volume
          
          if [ -n "${{ inputs.your_tag }}" ]; then
            TEST_TAG="${{ inputs.your_tag }}" docker-compose -f docker-compose.test.yml up --build test-app
          else
            docker-compose -f docker-compose.test.yml up --build test-app
          fi
          
          # Copy files from flask-test to localhost
          docker cp flask-tests:/app/report.xml ./report.xml
          docker cp flask-tests:/app/Dockerfile.app ./Dockerfile.app
          docker cp flask-tests:/app/Dockerfile.test ./Dockerfile.test
          docker cp flask-tests:/app/ ./
          ls -la ./app

      - name: Upload XML Report Artifact
        uses: actions/upload-artifact@v3
        with:
          name: xml-report
          path: ./report.xml
          retention-days: 1


  Trivy-scan:
    needs: [Test]
    runs-on: ubuntu-latest
    steps:
      - name: Install Trivy
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y wget
          sudo wget https://github.com/aquasecurity/trivy/releases/download/v0.29.1/trivy_0.29.1_Linux-64bit.deb
          sudo dpkg -i trivy_0.29.1_Linux-64bit.deb
      - name: Trivy Scan Dockerfile.app
        run: |
          set -e
          sudo trivy config --severity HIGH,CRITICAL ./Dockerfile.app
      - name: Trivy Scan Dockerfile.test
        run: |
          set -e
          sudo trivy config --severity HIGH,CRITICAL ./Dockerfile.test

  deploy:
    needs: [Trivy-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies (kubectl, Docker)
        run: |
          set -e
          apt-get update
          apt-get install -y python3-pip docker.io curl
          pip install pylint
          curl -sSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
          echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" >> /etc/apt/sources.list.d/kubernetes.list
          apt-get update && apt-get install -y kubectl

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      - name: Run Pylint
        run: |
          set -e
          pylint **/*.py

      - name: Build Docker image
        run: |
          set -e
          docker build -t ${{ secrets.DOCKER_USERNAME }}/my-app:${{ inputs.branch }} .

      - name: Push Docker image to Docker Hub
        run: |
          set -e
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/my-app:${{ inputs.branch }}

      - name: Deploy to Test Environment
        run: |
          set -e
          docker-compose -f docker-compose.yml up -d

      - name: Manual Approval for Staging Environment
        uses: hmarr/auto-approve-action@v4
        with:
          require: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to Staging Environment
        run: |
          set -e
          docker-compose -f docker-compose.yml up -d

      - name: Manual Approval for Production Environment
        uses: hmarr/auto-approve-action@v4
        with:
          require: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to Production (Kubernetes)
        if: ${{ inputs.branch == 'release' }}
        run: |
          set -e
          kubectl apply -f k8s/production-deployment.yaml

      - name: Verify Deployment
        run: |
          set -e
          kubectl rollout status deployment/memcached-deployment
