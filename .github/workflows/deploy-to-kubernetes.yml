name: Deploy to Kubernetes

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Select the branch to deploy'
        required: true
        default: 'release'
      your_tag:
        description: 'The pytest tag to run tests with'
        required: false

jobs:
  Install-dependencies:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:20.04
    steps:
      - name: Install-dependencies
        run: |
          apt-get update
          apt-get install -y python3-pip curl docker.io
          pip install pytest requests pylint
      - name: Upload-Artefacts
        uses: actions/upload-artifact@v3
        with:
          name: artefacts-file
          path: ./docker-compose.test.yml

  Install-Docker-Compose:
    needs: [Install-dependencies]
    runs-on: ubuntu-latest
    steps:
      - name: Download-Artefacts
        uses: actions/download-artifact@v3
        with:
          name: artefacts-file
      - name: Install-Docker-Compose
        run: |
          curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
      - name: Upload-Artefacts-again
        uses: actions/upload-artifact@v3
        with:
          name: artefacts-file
          path: ./docker-compose.test.yml

  Checkout-repository:
    needs: [Install-Docker-Compose]
    runs-on: ubuntu-latest
    steps:
      - name: Download-Artefacts
        uses: actions/download-artifact@v3
        with:
          name: artefacts-file
      - name: Checkout-repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch }}
      - name: Upload-Artefacts
        uses: actions/upload-artifact@v3
        with:
          name: artefacts-file
          path: ./docker-compose.test.yml

  Prepare-and-Test-Discovery:
    needs: [Checkout-repository]
    runs-on: ubuntu-latest
    steps:
      - name: Download-Artefacts
        uses: actions/download-artifact@v3
        with:
          name: artefacts-file
      - name: Prepare pytest environment
        run: |
          mkdir -p /app/.pytest_cache
          chmod -R u+w /app/.pytest_cache
      - name: Debug-Test-Discovery
        run: |
          pytest --collect-only
      - name: Upload-Artefacts
        uses: actions/upload-artifact@v3
        with:
          name: artefacts-file
          path: ./docker-compose.test.yml

  Testing:
    needs: [Prepare-and-Test-Discovery]
    runs-on: ubuntu-latest
    steps:
      - name: Download-Artefacts
        uses: actions/download-artifact@v3
        with:
          name: artefacts-file
      - name: Run-Docker-Compose-for-Testing
        run: |
          if [ -n "${{ inputs.your_tag }}" ]; then
            TEST_TAG="${{ inputs.your_tag }}" docker-compose -f docker-compose.test.yml up --build test-app
          else
            docker-compose -f docker-compose.test.yml up --build test-app
          fi
      - name: Upload-Artefacts
        uses: actions/upload-artifact@v3
        with:
          name: artefacts-file
          path: ./docker-compose.test.yml

  vulnerability-scan:
    needs: [Testing]
    runs-on: ubuntu-latest
    steps:
      - name: Download-Artefacts
        uses: actions/download-artifact@v3
        with:
          name: artefacts-file
      - name: Install-Trivy
        run: |
          curl -fsSL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
      - name: Scan Dockerfile for Vulnerabilities
        run: |
          trivy config --severity HIGH,CRITICAL Dockerfile
      - name: Upload docker-compose file again
        uses: actions/upload-artifact@v3
        with:
          name: artefacts-file
          path: ./docker-compose.test.yml

  deploy:
    needs: vulnerability-scan
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies (kubectl, Docker)
        run: |
          apt-get update
          apt-get install -y python3-pip docker.io curl
          pip install pylint
          curl -sSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
          echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" >> /etc/apt/sources.list.d/kubernetes.list
          apt-get update && apt-get install -y kubectl

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch }}

      - name: Run Pylint
        run: |
          pylint **/*.py

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/my-app:${{ inputs.branch }} .

      - name: Push Docker image to Docker Hub
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/my-app:${{ inputs.branch }}

      - name: Deploy to Test Environment
        run: |
          docker-compose -f docker-compose.yml up -d

      - name: Manual Approval for Staging Environment
        uses: hmarr/auto-approve-action@v3
        with:
          require: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to Staging Environment
        run: |
          docker-compose -f docker-compose.yml up -d

      - name: Manual Approval for Production Environment
        uses: hmarr/auto-approve-action@v3
        with:
          require: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to Production (Kubernetes)
        if: ${{ inputs.branch == 'release' }}
        run: |
          kubectl apply -f k8s/production-deployment.yaml

      - name: Verify Deployment
        run: |
          kubectl rollout status deployment/memcached-deployment
