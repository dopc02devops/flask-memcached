name: Deploy to Kubernetes

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Select the branch to deploy'
        required: true
        default: 'release'
      tag:
        description: 'Select the tag for testing'
        required: false

jobs:
  test:
    if: inputs.tag
    runs-on: ubuntu-latest
    container:
      image: ubuntu:20.04 # Specify the Docker image to use
    steps:
      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y python3-pip curl docker.io
          pip install pytest

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.tag }}

      - name: Run Docker Compose for Testing
        run: |
          docker-compose -f docker-compose.test.yml up --build --abort-on-container-exit

  deploy:
    needs: [test]
    runs-on: ubuntu-latest
    container:
      image: ubuntu:20.04 # Specify the Docker image to use
    steps:
      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y python3-pip docker.io curl
          pip install pylint
          curl -sSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
          echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" >> /etc/apt/sources.list.d/kubernetes.list
          apt-get update && apt-get install -y kubectl

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch }}

      - name: Run Pylint
        run: |
          pylint **/*.py

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/my-app:${{ inputs.tag || inputs.branch }} .

      - name: Push Docker image to Docker Hub
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/my-app:${{ inputs.tag || inputs.branch }}

      - name: Deploy to Test Environment
        run: |
          docker-compose -f docker-compose.yml up -d

      - name: Manual Approval for Staging Environment
        uses: hmarr/auto-approve-action@v3
        with:
          require: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to Staging Environment
        run: |
          docker-compose -f docker-compose.yml up -d

      - name: Manual Approval for Production Environment
        uses: hmarr/auto-approve-action@v3
        with:
          require: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to Production
        if: ${{ inputs.branch == 'release' }}
        run: |
          kubectl apply -f k8s/production-deployment.yaml

      - name: Verify Deployment
        run: |
          kubectl rollout status deployment/memcached-deployment
